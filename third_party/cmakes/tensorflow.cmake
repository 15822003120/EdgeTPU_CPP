if(${BUILD_SYSTEM} STREQUAL armv7)
	target_link_libraries(${ProjectName} ${CMAKE_CURRENT_LIST_DIR}/../tensorflow_prebuilt/rpi_armv7l/lib/libtensorflow-lite.a)
	target_link_libraries(${ProjectName} pthread m dl)
elseif(${BUILD_SYSTEM} STREQUAL aarch64)
	target_link_libraries(${ProjectName} ${CMAKE_CURRENT_LIST_DIR}/../tensorflow_prebuilt/generic-aarch64_armv8-a/lib/libtensorflow-lite.a)
	target_link_libraries(${ProjectName} pthread m dl)
elseif(${BUILD_SYSTEM} STREQUAL x64_linux)
	target_link_libraries(${ProjectName} ${CMAKE_CURRENT_LIST_DIR}/../tensorflow_prebuilt/x64_linux/lib/libtensorflow-lite.a)
	target_link_libraries(${ProjectName} pthread m dl)
elseif(${BUILD_SYSTEM} STREQUAL x64_windows)
	target_link_libraries(${ProjectName} ${CMAKE_CURRENT_LIST_DIR}/../tensorflow_prebuilt/x64_windows/lib/tensorflowlite.dll.if.lib)
	file(COPY ${CMAKE_CURRENT_LIST_DIR}/../tensorflow_prebuilt/x64_windows/lib/tensorflowlite.dll DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
else()
	message(FATAL_ERROR "[tensorflow] unexpected BUILD_SYSTEM" ${BUILD_SYSTEM})
endif()

target_include_directories(${ProjectName} PUBLIC ${CMAKE_CURRENT_LIST_DIR}/../tensorflow)
target_include_directories(${ProjectName} PUBLIC ${CMAKE_CURRENT_LIST_DIR}/../tensorflow/tensorflow/lite/tools/make/downloads/flatbuffers/include)
target_include_directories(${ProjectName} PUBLIC ${CMAKE_CURRENT_LIST_DIR}/../tensorflow/tensorflow/lite/tools/make/downloads/absl)
