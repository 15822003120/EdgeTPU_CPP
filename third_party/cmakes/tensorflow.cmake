if(${ARCH_TYPE} STREQUAL armv7)
	message("[BUILD tensorflow] armv7")
	target_link_libraries(${ProjectName} ${CMAKE_CURRENT_LIST_DIR}/../tensorflow_prebuilt/rpi_armv7l/lib/libtensorflow-lite.a)
	target_link_libraries(${ProjectName} pthread m dl)
elseif(${ARCH_TYPE} STREQUAL aarch64)
	message("[BUILD tensorflow] aarch64")
	target_link_libraries(${ProjectName} ${CMAKE_CURRENT_LIST_DIR}/../tensorflow_prebuilt/generic-aarch64_armv8-a/lib/libtensorflow-lite.a)
	target_link_libraries(${ProjectName} pthread m dl)
else()
	if(WIN32)
		message("[BUILD tensorflow] windows (x64)")
		target_link_libraries(${ProjectName} ${CMAKE_CURRENT_LIST_DIR}/../tensorflow_prebuilt/x64_windows/lib/tensorflowlite.dll.if.lib)
		file(COPY ${CMAKE_CURRENT_LIST_DIR}/../tensorflow_prebuilt/x64_windows/lib/tensorflowlite.dll DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
	else()
		message("[BUILD tensorflow] linux (x64)")
		target_link_libraries(${ProjectName} ${CMAKE_CURRENT_LIST_DIR}/../tensorflow_prebuilt/x64_linux/lib/libtensorflow-lite.a)
		target_link_libraries(${ProjectName} pthread m dl)
	endif()
endif()

target_include_directories(${ProjectName} PUBLIC ${CMAKE_CURRENT_LIST_DIR}/../tensorflow)
target_include_directories(${ProjectName} PUBLIC ${CMAKE_CURRENT_LIST_DIR}/../tensorflow/tensorflow/lite/tools/make/downloads/flatbuffers/include)
target_include_directories(${ProjectName} PUBLIC ${CMAKE_CURRENT_LIST_DIR}/../tensorflow/tensorflow/lite/tools/make/downloads/absl)
